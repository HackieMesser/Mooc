#double items
def double_items(numbers:list):
    new_nums=[]
    for i in numbers:
        i*=2
        new_nums.append(i)
    return new_nums
#ms
def double_items(numbers:list):
    new_nums=numbers[:]
    for i in (range (len(new_nums))):
        new_nums[i]*=2
    return new_nums
#remove smallest
def remove_smallest(numbers:list):
    new=numbers[:]
    new.sort()
    numbers.remove((new.pop(0)))
#ms
def remove_smallest(numbers:list):
    minnum=min(numbers)
    numbers.remove(new)

#sudoku print and add
def print_sudoku(sudoku:list):
    row=0
    column=0
    for i in range(0,9):
        column=0
        for i2 in range(0,9):
            if sudoku[row][column]==0 or sudoku[row][column]=='_':  
                sudoku[row][column] = '_'
            column+=1
        row+=1
    row=0
    for i in range(0,9):
        column=0
        for i2 in range(0,9):
            if i2 != 8 and i2 != 2 and i2 !=5: 
                print(sudoku[row][column], end=" ")
            elif i2 != 8 and i2 == 2 or i2 ==5:
                print(sudoku[row][column], end="  ")
            elif i2 ==8: 
                print(sudoku[row][column])
            column+=1
        if i==2 or i ==5:
                print()  
        row+=1

def add_number(sudoku,a,b,c):
    sudoku[a][b] = c
    print(sudoku)
#rbb
def print_sudoku(sudoku: list):
    r = 0
    for row in sudoku:
        s = 0
        for character in row:
            s += 1
            if character == 0:
                character = "_"
            m = f"{character} "
            if s%3 == 0 and s < 8:
                m += " "
            print(m, end="")
 
        print()
        r += 1
        if r%3 == 0 and r < 8:
            print()
 
def add_number(sudoku: list, row_no: int, column_no: int, number: int):
    sudoku[row_no][column_no] = number

#need to go back to sudoku copy and orignal thing
#tictactoe
def play_turn(game_board, x, y, piece):
    valid = [0,1,2]
    if x in valid and y in valid:
        if game_board[y][x] == "":
            game_board[y][x] = piece
            return True
        else:
            return False
    else:
        return False
if __name__ == '__main__':
    game_board = [["", "", ""], ["", "", ""], ["", "", ""]]
    print(play_turn(game_board, 2, 0, "X"))
    print(game_board)
#transpose
def transpose(matrix):
    mat=matrix[:]
    index=0
    for x in matrix:
        mat[index]=x[:]
        index+=1
    for row in range(0,len(matrix)):
        for column in range(0,len(matrix)):
            mat[column][row]=matrix[row][column]
    index=0
    for x in mat:
        matrix[index]=x[:]
        index+=1
    



